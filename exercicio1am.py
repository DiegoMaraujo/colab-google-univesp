# -*- coding: utf-8 -*-
"""Exercicio1AM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w0tBdmQMyNnpfRUiZIKZQmeevMm0YG0n
"""

#1. Para este exercício, usamos as bibliotecas Pandas, Matplotlib e Scikit-Learn. Importe as bibliotecas.

from google.colab import files

import pandas as pd

import matplotlib.pyplot as plt

from sklearn import tree

from sklearn.tree import DecisionTreeClassifier, plot_tree

from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score

import warnings

warnings.simplefilter('ignore')

#2. Pegando os dados.

url='https://raw.githubusercontent.com/higoramario/univesp-com410-aprendizado-de-maquinas/main/carros-avaliacao.csv'
carros=pd.read_csv(url)
carros.head()

#3. Transformando os atributos em números para uso na Árvore de Decisão
carros['preco'] = carros['preco'].map({'muitoalto':3,'alto':2,'medio':1,'baixo':0})

carros['manutencao'] = carros['manutencao'].map({'muitoalto':3,'alto':2,'medio':1,'baixo':0})

carros['portas'] = carros['portas'].map({'2':2,'3':3,'4':4,'5mais':5})

carros['pessoas'] = carros['pessoas'].map({'2':2,'4':4,'5mais':5})

carros['bagageiro'] = carros['bagageiro'].map({'grande':2,'medio':1,'pequeno':0})

carros['seguranca'] = carros['seguranca'].map({'alta':2,'media':1,'baixa':0})

carros.head(10)

#4. Separando atributos e classes para o treinamento e teste.

atributos_nomes = ['preco','manutencao','portas','pessoas','bagageiro','seguranca']

atributos = carros[atributos_nomes]

classes = carros['aceitabilidade']

#5. Separando o conjunto de dados para treinamento e teste.

atributos_treino, atributos_teste, classes_treino, classes_teste = train_test_split(atributos, classes, test_size=0.1, random_state=10)

#6. Criando o modelo.

arvore = DecisionTreeClassifier()

arvore = arvore.fit(atributos_treino,classes_treino)



#7. Plotando a árvore de decisão em tamanho grande para conseguir visualizar em detalhes.
# No caderno Python, clique na figura para alternar entre visão ampliada e reduzida.

plt.figure(figsize=(300,160))

plot_tree(arvore, filled=True, rounded=True, feature_names=atributos_nomes)

plt.show()